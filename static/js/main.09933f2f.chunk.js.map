{"version":3,"sources":["components/Navbar.js","components/Home.js","components/Fav.js","components/Pagination.js","components/sidenav.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","to","React","Component","Home","Posts","props","state","city","console","log","location","onStarClick","nextValue","prevValue","name","setState","rating","this","loading","value","onChange","useEffect","placeholder","posts","map","post","key","id","starCount","onClick","bank_name","branch","ifsc","Paginations","postsPerPage","totalPosts","paginate","pageNumbers","i","Math","ceil","push","number","aria-label","href","Sidenav","App","useState","setPosts","setLoading","currentPage","setCurrentPage","a","length","forEach","axios","get","res","data","fetchPosts","indexOfLastPost","indexOfFirstPost","currentPosts","slice","path","component","Fav","handleChange","event","target","Pagination","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8TAiBeA,E,iLAZP,OACE,6BACE,yBAAKC,UAAU,+DAEP,kBAAC,IAAD,CAAMC,GAAG,QAAQD,UAAU,cAA3B,mB,GANCE,IAAMC,WCcZC,E,iLAXP,OACI,6BACI,yBAAKJ,UAAU,eACX,wBAAIA,UAAU,gBAAd,UACA,wBAAIA,UAAU,gBAAd,mBACA,wBAAIA,UAAU,gBAAd,uB,GATDE,IAAMC,W,iBCwGVE,E,YApGb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACTC,KAAM,IAHO,E,sEAMZ,IAAD,OASNC,QAAQC,IAAI,QALF,CACR,CAACC,SAAS,WACV,CAACA,SAAS,UACV,CAACA,SAAS,WAaZ,IAAMC,EAAY,SAACC,EAAWC,EAAWC,GACvC,EAAKC,SAAS,CAACC,OAAQJ,KAGjBI,EAAWC,KAAKX,MAAhBU,OAER,OAAGC,KAAKC,QACA,2CAIP,wBAAInB,UAAU,mBACd,qCAEA,yBAAKA,UAAU,YACf,4BACAoB,MAAO,CAAC,UAAU,UAClBC,SAAUH,KAAKZ,MAAMgB,UAErBC,YAAY,eAIZ,4BAAQH,MAAM,WAAd,WACA,4BAAQA,MAAM,UAAd,YAKC,2BAAOpB,UAAU,SACjB,+BACE,4BACE,sCAGA,wCACA,sCACA,uCAIHkB,KAAKZ,MAAMkB,MAAMC,KAAI,SAAAC,GAAI,OAAI,wBAAIC,IAAKD,EAAKE,GAAI5B,UAAU,mBAEnD,yBAAKA,UAAU,aAGxB,2BAAOA,UAAU,SAEf,+BACE,4BACE,4BACE,kBAAC,IAAD,CACAe,KAAK,QACLc,UAAW,EACXT,MAAOH,EACPa,QAASlB,KAGX,4BAAKc,EAAKK,WACV,4BAAKL,EAAKM,QACV,4BAAKN,EAAKO,kB,GAxFE/B,IAAMC,WCkBT+B,EAnBI,SAAC,GAElB,IAFwD,IAArCC,EAAoC,EAApCA,aAAaC,EAAuB,EAAvBA,WAAWC,EAAY,EAAZA,SACrCC,EAAY,GACVC,EAAE,EAAEA,GAAGC,KAAKC,KAAKL,EAAWD,GAAcI,IACjDD,EAAYI,KAAKH,GAIlB,IADA,IAAMI,EAAQ,GACNJ,EAAE,EAAEA,GAAG,EAAEA,IACbI,EAAOD,KAAKH,GAGhB,OACE,yBAAKK,aAAW,2BACd,wBAAI5C,UAAU,cAAcsC,EAAYb,KAAI,SAAAkB,GAAM,OAAG,wBAAIhB,IAAKgB,EAAQ3C,UAAU,aAChF,uBAAG6C,KAAK,QAAQf,QAAS,kBAAIO,EAASM,IAAS3C,UAAU,aAAa2C,UCE/DG,E,iLAfP,OACI,yBAAK9C,UAAU,WACX,4BACI,4BACI,kBAAC,IAAD,CAAWC,GAAG,SAAd,SAEJ,4BACI,kBAAC,IAAD,CAAUA,GAAG,QAAb,mB,GATFC,IAAMC,W,yBCkHb4C,MAxGf,SAAaxC,EAAMC,GAAO,IAAD,SAUAwC,mBAAS,IAVT,mBAUhBxB,EAVgB,KAUVyB,EAVU,OAWID,oBAAS,GAXb,mBAWhB7B,EAXgB,KAWR+B,EAXQ,OAYYF,mBAAS,GAZrB,mBAYhBG,EAZgB,KAYJC,EAZI,OAaFJ,mBAAS,IAAvBb,EAbgB,oBAyBvBb,qBAAU,YAQQ,uCAAG,gCAAA+B,EAAA,sDASf,IAPE7C,EAAM,CACN,CAACG,SAAS,WACV,CAACA,SAAS,UACV,CAACA,SAAS,UAIH4B,EAAE,EAAGA,EAAE/B,EAAK+B,GAAGe,OAAOf,IAC3B/B,EAAKA,EAAK+B,GAAGgB,QAAQ/C,GAVV,GAWD,YAAVA,EAAK,GAXM,yCAYLA,GAZK,UAcD,WAAVA,EAAK,GAdM,yCAeLA,GAfK,UAiBA,UAAVA,EAAK,GAjBK,0CAkBLA,GAlBK,QAoBZC,QAAQC,IAAI,UAAUF,GApBV,cAuBP,QACVC,QAAQC,IAAI,QAAQF,GACpB0C,GAAW,GAzBM,UA0BEM,IAAMC,IAAI,2DA1BZ,QA0BVC,EA1BU,OA2BjBT,EAASS,EAAIC,MACbT,GAAW,GA5BM,4CAAH,qDA8BhBU,KAEA,IAGFnD,QAAQC,IAAI,QAAQc,EAAMhB,MAE1B,IAAMqD,EAAgBV,EAAahB,EAC7B2B,EAAiBD,EAAgB1B,EACjC4B,EAAcvC,EAAMwC,MAAMF,EAAiBD,GAKjD,OACE,kBAAC,IAAD,KAEA,6BACC,kBAAC,EAAD,MAEA,kBAAC,IAAD,KACA,6BACE,kBAAC,EAAD,MACC,yBAAK7D,UAAU,QACb,kBAAC,IAAD,CAAOiE,KAAK,QAAQC,UAAW9D,IAC/B,kBAAC,IAAD,CAAO6D,KAAK,QACV,kBAACE,EAAD,CAAK3C,MAAOuC,EAAc5C,QAASA,EAASX,KAAMA,EAAMc,UAAWA,YAAW8C,aArEpE,SAACC,GACnB,EAAKrD,SAAS,CAACR,KAAM6D,EAAMC,OAAOlD,QAClCX,QAAQC,IAAI2D,EAAMC,OAAOlD,UAsEjB,kBAACmD,EAAD,CAAYpC,aAAcA,EAAcC,WAAYZ,EAAM8B,OAAQjB,SAlB7D,SAACC,GAAD,OAAec,EAAed,aC1E3BkC,QACW,cAA7BC,OAAO9D,SAAS+D,UAEe,UAA7BD,OAAO9D,SAAS+D,UAEhBD,OAAO9D,SAAS+D,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9E,QAAQ8E,MAAMA,EAAMC,c","file":"static/js/main.09933f2f.chunk.js","sourcesContent":["import React from 'react';\n//  import Home from '../components/Home.js'\nimport {Link} from \"react-router-dom\";\nclass Navbar extends React.Component{\n    render(){\n        return(\n          <div>\n            <nav className=\"navbar navbar-expand-sm bg-dark navbar-dark  navbar-default\">\n                \n                    <Link to=\"/bank\" className=\"brand-logo\">\n                    BrandLogo\n                </Link>\n            </nav>\n        </div>\n        )\n};\n};\nexport default Navbar;","import React from 'react';\n\nclass Home extends React.Component{\n    \n   \n    render(){\n        return(\n            <div>\n                <div className=\"card card-1\">\n                    <h4 className=\"account_name\">hhhhhh</h4>\n                    <h4 className=\"account_name\">Bank Name:Kotak</h4>\n                    <h4 className=\"account_name\">ifsc:kkbk0001</h4>\n                </div>\n            </div>\n        )\n};\n};\nexport default Home ;","import React from 'react';\n\nimport StarRatingComponent from 'react-star-rating-component';\n\nclass Posts extends React.Component{\n\n  constructor(props) {\n    super(props);\n    this.state = {\n        city: []\n    };    \n};\nrender(){\n \n\n  \n  let city =[\n    {location:\"KOLKATA\"},\n    {location:\"MUMBAI\"},\n    {location:\"DELHI\"}\n  ]\n  console.log(\"state\",city);\n  // const {cityf} = state\n  // const handleChange =(event) => {\n  //   this.setState({city: event.target.value });\n  //   console.log(event.target.value);\n  // }\n  \n\n\n\n  \n  const onStarClick=(nextValue, prevValue, name) =>{\n    this.setState({rating: nextValue})\n  }\n  \n  const { rating } = this.state;\n  // console.log(\"gugy\",city[0]);\n  if(this.loading){\n   return <h2>Loading....</h2>\n  }\n \n  return(\n   <ul className='list-group mb-2'>\n   <h2>Hello</h2>\n   \n   <div className='col-sm-4'>\n   <select  \n   value={['KOLKATA','MUMBAI']} \n   onChange={this.props.useEffect} \n                \n   placeholder=\"Select city\"\n   \n  //  defaultOptions={false}\n  >\n   <option value=\"KOLKATA\">Kolkata</option>\n   <option value=\"MUMBAI\">Mumbai</option>\n  \n   </select>\n              \n    </div>\n    <table className=\"table\">\n    <thead>\n      <tr>\n        <th>\n          Rating\n        </th>\n        <th>Bankname</th>\n        <th>Branch</th>\n        <th>IFSC</th>\n      </tr>\n    </thead>\n    </table>\n    {this.props.posts.map(post =>(<li key={post.id} className='list-group-item'>\n   \n           <div className='col-sm-4'>\n      \n    </div>  \n  <table className=\"table\">\n    \n    <tbody>\n      <tr>\n        <td>\n          <StarRatingComponent \n          name=\"rate1\" \n          starCount={1}\n          value={rating}\n          onClick={onStarClick}\n          />\n        </td>\n        <td>{post.bank_name}</td>\n        <td>{post.branch}</td>\n        <td>{post.ifsc}</td>\n      </tr>\n    </tbody>\n  </table></li>))}\n   </ul>\n  )\n\n}\n\n}\n  \n// const Posts=({posts,loading,state}) =>{\n  \n// }\nexport default Posts;","import React from 'react';\n\n\n  const Paginations =({postsPerPage,totalPosts,paginate})=>{\n    const pageNumbers=[];\n    for(let i=1;i<=Math.ceil(totalPosts/postsPerPage);i++){\n     pageNumbers.push(i);\n  \n    }\n    const number =[];\n    for(let i=1;i<=5;i++){\n        number.push(i);\n    }\n        \n    return(\n      <nav aria-label=\"Page navigation example\">\n        <ul className=\"pagination\">{pageNumbers.map(number=>(<li key={number} className=\"page-item\">\n        <a href=\"#/fav\" onClick={()=>paginate(number)} className=\"page-link\">{number}</a>\n        </li>))}</ul>\n      </nav>\n    )\n  }\n  export default Paginations;","import  React  from 'react';\nimport {NavLink} from \"react-router-dom\";\nclass Sidenav extends React.Component{\n    render(){\n        return (\n            <div className=\"sidenav\">\n                <ul >\n                    <li>\n                        <NavLink   to=\"/bank\">Bank</NavLink>\n                    </li>\n                    <li>\n                        <NavLink  to=\"/fav\">Favorite</NavLink>\n                    </li>\n                \n                </ul>\n            </div>\n        )\n    }\n}\nexport default Sidenav;","import React,{useState,useEffect} from 'react';\n\nimport './App.css';\nimport Navbar from './components/Navbar.js';\nimport Home from './components/Home.js';\nimport Fav from './components/Fav.js';\nimport Pagination from './components/Pagination';\nimport Sidenav from './components/sidenav';\nimport axios from 'axios';\nimport {BrowserRouter,Switch,Route} from \"react-router-dom\";\n\n\nfunction App(state,city) {\n  \n  state = {\n    city: []\n\n  }\n  \n\n\n  \n  const [posts,setPosts]=useState([]);\n  const [loading,setLoading]=useState(false);\n  const [currentPage,setCurrentPage]=useState(1);\n  const [postsPerPage]=useState(10);\n  // var city =[\n  //   {location:\"KOLKATA\"},\n  //   {location:\"MUMBAI\"},\n  //   {location:\"DELHI\"}\n  // ]\n  // console.log(\"beach\",city[location]);\n  const handleChange =(event) => {\n    this.setState({city: event.target.value });\n    console.log(event.target.value);\n  }\n  \n  useEffect(()=>{\n    // let city=\"MUMBAI\";\n    // city={\n\n    // }\n    \n    // let pathvars='DELHI';\n    // console.log(\"city\",city)\n    const fetchPosts = async ()=>{\n     \n      var city =[\n          {location:\"KOLKATA\"},\n          {location:\"MUMBAI\"},\n          {location:\"DELHI\"}\n        ]\n        \n      //  city.forEach(city);\n        for(let  i=0; i<city[i].length;i++)\n        var city=city[i].forEach(city);\n         if(city[0]==='KOLKATA'){\n           return city\n         }\n         if(city[1]==='MUMBAI'){\n           return city;\n         }\n         if (city[2]==='DELHI'){\n           return city;\n         }else{\n           console.log(\"fuckyou\",city);\n         }\n         \n      let city4='DELHI';\n      console.log(\"hello\",city);\n      setLoading(true);\n       const res = await axios.get(`https://vast-shore-74260.herokuapp.com/banks?city=`+city4);\n      setPosts(res.data);\n      setLoading(false);\n    }\n    fetchPosts();\n    \n  },[]);\n  \n  \n  console.log(\"items\",posts.city)\n  //Get current posts\n  const indexOfLastPost=currentPage* postsPerPage;\n  const indexOfFirstPost=indexOfLastPost-postsPerPage;\n  const currentPosts =posts.slice(indexOfFirstPost,indexOfLastPost)\n  //change page\n  const paginate=(pageNumbers)=>setCurrentPage(pageNumbers)\n\n  \n  return (\n    <BrowserRouter>\n    \n    <div>\n     <Navbar/>\n    \n     <Switch >\n     <div>\n       <Sidenav/>\n        <div className=\"main\">\n          <Route path=\"/bank\" component={Home} /> \n          <Route path=\"/fav\">\n            <Fav posts={currentPosts} loading={loading} city={city} useEffect={useEffect} handleChange ={handleChange }\n           \n            />\n            <Pagination postsPerPage={postsPerPage} totalPosts={posts.length} paginate={paginate} />\n          </Route>\n        </div>\n        </div>\n      </Switch>\n    </div>\n    \n    \n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}